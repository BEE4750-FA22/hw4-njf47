---
title: "BEE 4750/5750 Homework 4"
author: "Nathan Follett (njf47)"
date: `j import Dates; Dates.Date(Dates.now())`
weave_options:
    term: false
    results: tex
    cache: off
---

<!-- This setups the environment and installs packages, but doesn't appear in the generated document -->
<!-- You shouldn't need to modify this -->
```julia; echo = false; results = "hidden"
using Pkg
Pkg.activate(".")
Pkg.instantiate()
```

# Problem 1

## Problem 1.1

Overall Recycling and Ash Fractions

```julia 

city_waste = [100; 170];

ash = round(Int, 100*(0.15*0.08 + 0.4*0.07 + 0.05*0.05 +0.03*0.1 + 0.02*0.15 +0.05*0.02 +0.18*0.02 +0.04+0.02+0.02+0.01+0.03));
recy = round(Int, 100*(0.15*0 + 0.4*0.55 + 0.05*0.15 +0.03*0.1 + 0.02*0 +0.05*0.3 +0.18*0.4 +0.04*0.6+0.02*0.75 +0.02*0.8+0.01*0.5 + 0.03*0));

secrecy = round(Int, 100*(0.15*1*0.08 + 0.4*0.45*0.07 + 0.05*0.85*0.05 +0.03*0.9*0.1 + 0.02*1*0.15 +0.05*0.7*0.02 +0.18*0.6*0.02 +0.04*0.4*1+0.02*0.25*1 +0.02*0.2*1+0.01*0.5*1 + 0.03*1*0.7));

# WTE = 1, MRF = 2, LF = 3
cap = [150 350 200];
fix = [2500 1500 2000];
tip = [60 7 50];
rec = 45;


```
* The overall ash fraction is `j ash`%
* The overall recycling fraction is `j recy`%

## Problem 1.2

```julia 
using Jump
using Cbc

waste=Model(Cbc.optimizer)
I=1:2 #cities
J=1:3 #facilities
# do i need a k here for disposal? K = 1:3

@variable(waste, W[i in I, j in J]>=0)
@variable(waste, R[k in J, j in J]>=0)
@variable(waste, Y[j in J], Bin)

```

Variables: 
W
R
Y


## Problem 1.3
The objective is to minimize the costs of implementing the MSW disposal plan. 
Costs will include fixed operational cost, tipping cost, recycling cost, and transportation cost.
I calculated the W and R matrix values by hand for the objective. 
The zero values are because the Landfill and WTE will not generate any recycling, and the recycling cannot recycle to itself. 

```math 

WTE cost = 2500*Y[1] + 60*(W[1,1] + W[2,1] + R[2,1]);

MRF cost = 1500*Y[2] + 7*(W[1,2] + W[2,2]) + (0.38)*45*(W[1,2] + W[2,2]));

LF cost = 2000*Y[3] + 50*(W[1,3] + W[2,3] + R[1,3] + R[2,3]);

transportation costs = 1.5*(15*W[1,1] + 5*W[1,2] + 30*W[1,3] + 10*W[2,1] + 15*W[2,2] + 25*W[2,3] + 18*R[1,3] + 15*R[2,1] + 32*R[2,3]);

```

```julia

@objective(waste, Min, sum([82.5 31.6 95; 75 46.6 87.5].*W) + 
sum([0 0 77; 82.5 0 98; 0 0 0].*R) + 
sum([2500,1500,2000].*Y))

```
## Problem 1.4

Constraints include:

* Capacity constraints for each facility cannot be exceeded 
* The sum of the material processed by all the facilities must equal the waste produced by the cities (meet demand)
* The waste leaving the WTE is based on the ash fraction , and the waste leaving the MRF is based on the recycling fraction
* Commitment and non-negativity constraints based on facility usage (if one facility is not recieving waste, it won't be used and Y = 0)
* Residuals from facility x cannot go to facility x (diagonal constraint = 0)

```julia

@constraint(waste, city[i in I], sum(W[i,:]) == city_waste[i])
@constraint(waste, wte, W[1,1] + W[2,1] + R[2,1] <= 150)
@constraint(waste, mrf, W[1,2], W[2,2] <= 130)
@constraint(waste, lf, W[1,3] + W[2,3] + R[2,3] + R[1,3] <= 200)
# residuals
@constraint(waste, resid1, R[1,3] == (ash/100).*(W[1,1] + W[2,1] + R[2,1]))
@constraint(waste, resid2, R[2,1] + R[2,3] = ((100-recy)/100).*(W[1,2] + W[2,2]))
@constraint(waste, resid3, sum(R[3,:]) == 0)
@constraint(waste, nonresiddiag, sum(R[i,i] for i in I) == 0)
@constraint(waste, noresid, R[1,2] == 0)
# commitment
@constraint(waste, commit1, !Y[1] => {W[1,1] + W[2,1] + R[2,1] ==0})
@constraint(waste, commit1, !Y[2] => {W[1,2] + W[2,2] == 0})
@constraint(waste, commit3, Y[3] == 1)

```

## Problem 1.5

```julia

set_silent(waste)
optimize!(waste)
objective_value(waste)

```
```julia; term=true

value.(W)
```
```julia; term=true

value.(R)
```



## Problem 1.6

# Problem 2

## Problem 2.1

## Problem 2.2

## Problem 2.3

# References